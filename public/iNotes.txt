//1.what does state variable two things?
Ans:- state variable rerenders and also have the history,when state variable changes -like having previous value.
Note:- everytime during rerender it doesnt change it(state variable value would remain same).

//2.when using strict mode in app.js what it does?
Ans:- when using strict mode it render twice.

//3.diffrence between useRef and useState?
Ans:-useRef doesnt rerender, while useState rerenders.
useRef do the same thing as useState,that it will retain the variable's value even on the rerender.
you would use useRef to keep the reference of the function and it would not cause the rerender.

useRef do:-1.retain the value of a variable even on cause a rerender 2. in order to point to particular HTML Element like :-(          <input id="btn" ref={valueRef} type="text" />).

useState do:-rerender and retain the value on rerender. used to create a state variable


Ex:-Case1 :-  if we have a button and a method and on button click and using useRef:-
-it will not cause and rerender it will only print "click ref" under button click method only.


const App = () => {
  const valueRef = useRef(0);
  const [count, setCount] = useState(10);
  console.log("render ref", valueRef.current);
  const onSubmit = () => {  //button click
    // setCount(count + 1);
    valueRef.current = valueRef.current + 1;
    console.log("click ref", valueRef.current);
    console.log("state", count);
  };
Ex:-Case2 :- 
const App = () => {
  const valueRef = useRef(0);
  const [count, setCount] = useState(10);
  console.log("render ref", valueRef.current);
  const onSubmit = () => {  //button click
    setCount(count + 1);
    valueRef.current = valueRef.current + 1;
    console.log("click ref", valueRef.current);
    console.log("state", count);
  };

-But if we uncomment setCount(count + 1); then it will print both "render ref" and "click ref" because useState causes rerender and here changing a state variable's count value using (setCount(count + 1))

when you use useState and state variable are getting change by (setCount(count + 1);) then it would cause rerender,
but if we use useRef and it would not cause rerender.


//4.useCallback Hook?
Ans:- it will preventing a child to rerendering,it was preventing a reference change. internaly useCallback use the useRef in order to retain the variable's reference/ function's reference so that it doesnt cause the rerender.
useCallback do:- to keep the reference of the variable. 

//Done